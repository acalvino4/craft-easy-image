{% macro srcset(image, transformSet) %}
  srcset="
    {% for transform in transformSet.transforms %}
      {{ image[0].getUrl(transform) }} {{ transform.width }}w,
    {% endfor %}
  "
  {# Set height and width based on the set's aspect ratio - these numbers are just used to calculate aspect ratio to prevent layout shift. #}
  {% set aspectRatio = transformSet.aspectRatio ?? (image[0].width / image[0].height) %}
  height="144"
  width="{{ (144 * aspectRatio)|round }}"
{% endmacro %}

<picture>
  {# Output sources for main format #}
  {% for image in images %}
    {% set transformSet = settings.transformSets[image[1]] %}
    {% if transformSet.fallbackFormat is defined and transformSet.format is not same as(transformSet.fallbackFormat) %} {# if these are identical, the source will be covered in the next images loop #}
      <source
        type="image/{{ transformSet.format == 'jpg' ? 'jpeg' : transformSet.format }}"
        {{ _self.srcset(image, transformSet) }}
        {% if not loop.last %}
          media="(min-width: {{ image[2]|default(0) }}px)"
        {% endif %}
        {% if attributes.sizes is defined %}sizes="{{ attributes.sizes }}"{% endif %}
      />
    {% endif %}
  {% endfor %}
  {# Output sources for fallback format #}
  {% for image in images %}
    {% set transformSet = settings.transformSets[image[1]] %}
    {% do transformSet.fallback() %} {# updates format of this transform set to the fallback #}
    {% if not loop.last %}
      <source
        {% set fallback = transformSet.fallbackFormat ?? transformSet.format %}
        type="image/{{ fallback == 'jpg' ? 'jpeg' : fallback }}"
        {{ _self.srcset(image, transformSet) }}
        media="(min-width: {{ image[2]|default(0) }}px)"
        {% if attributes.sizes is defined %}sizes="{{ attributes.sizes }}"{% endif %}
      />
    {% else %} {# Fallback img tag in place of final source #}
      <img
        {{ attr(attributes|merge({
            style: "background: url(#{blurhash(image[0])}) center center / cover;" ~ attributes.style|default('')
        })) }}
        {# default to first transform for required src attr #}
        src="{{ image[0].getUrl(transformSet.transforms[0]) }}"
        {{ _self.srcset(image, transformSet) }}
        alt="{{ image[0].alt ?? image[0].title }}"
        {% if eager != true %}loading="lazy"{% endif %}
      />
    {% endif %}
    {% do transformSet.reset() %} {# reverts format of this transform set to the standard #}
  {% endfor %}
</picture>
